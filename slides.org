#+TITLE: ... программирование
#+AUTHOR: Андрей Руденко
#+EMAIL: prepor@andrews-air
#+CREATOR: Emacs 24.3.90.1 (Org mode 8.2.5c)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: ru
#+SELECT_TAGS: export
#+startup: beamer
#+LaTeX_CLASS: beamer
#+OPTIONS: H:2 toc:nil
#+BEAMER_HEADER: \usecolortheme{seagull}
#+BEAMER_HEADER: \setbeamertemplate{itemize item}{$\bullet$}
#+BEAMER_HEADER: \setbeamertemplate{navigation symbols}{}

* Данные
** Данные                                                      :B_fullframe:
:PROPERTIES:
:BEAMER_env: fullframe
:END:
#+BEGIN_LaTeX
\begin{center}
\Huge Данные
\end{center}
#+END_LaTeX
** Данные везде
- Социальные связи
- Генетика
- Рекомендации (информации очень много, но это не повод поднимать руки вверх. Компьютеры помогут нам выделить самую косточку)
- Computer Vision
- Маркетинг (конверсии, a/b тестирование)
- Медицина в целом (разработка лекарства, разработка методики лечения, постановка диагноза - все это сбор, обработка и анализ данных почти в чистом виде)
** Данные плоть и кровь интернета
- Но сегодня мы говорим только про веб
- Данные это не только big data (и не столько, конечно). Каждый сайт имеет дело с огромным количеством информации, как и оперируя ей, так и просто получая.
- Почти никто не умеет обрабатывать получаемые данные, а оперируют данными с каким-то невероятным количеством лишних телодвижений
- Огромные фреймворки, тысячи страниц документации, сотни классов, километры uml-ей, деревья наследований высотой в дом
- 99 процентов задач: взять вот это, отфильтровать от того, изменить так вот и засунуть вон туда (data driven development, ага)
- Нам нужен правильный инструмент
** Clojure                                                      :B_fullframe:
:PROPERTIES:
:BEAMER_env: fullframe
:END:
Правильный инструмент - Clojure ;)
** Clojure
- Пробежимся очень кратко, Clojure Только для демонстрации
- Диалект лиспа, работающий на JVM
** Очень лаконичный синтаксис
#+BEGIN_SRC clojure
{} ;; Map

#{} ;; Set

[] ;; Vector
#+END_SRC

** 
#+BEGIN_SRC clojure
{:name "Andrew"}

{:user {:address {:street "Lenina"}}}

(-> params :user :address :street)
#+END_SRC
** 
Каждая структура данных является еще и функцией
#+BEGIN_SRC clojure
(map {0 :move 1 :left 2 :right} [0 0 0 1 0 2 2])
; => (:move :move :move :left :move :right :right)
#+END_SRC
Кейворд тоже...
#+BEGIN_SRC clojure
  (:foo {:bar "hi" :foo "hello"})
  ; => "hello"
#+END_SRC
** 
Объявление анонимной функции
#+BEGIN_SRC clojure
(map #(* 3 %) [1 2 3])
; => (3 6 9)
#+END_SRC
** Правильный подход к nil
Самый непонятный тип данных, но встречающийся везде и всюду
#+BEGIN_SRC clojure
(int nil)
; => NullPointerException

(conj nil 1)
; => (1)

(assoc nil :name "Andrew")
; => {:name "Andrew"}

(:foo nil)
; => nil
#+END_SRC
** Immutable
- Объекты, все структуры данных бескомпромиссно иммутабельны
- Но эффектино расходуют память (persistent)
- При изменении структуры переиспользуется большая часть предыдущей, при этом все ссылки на предыдущее состояние остаются валидными
**                                                                  :ATTACH:
:PROPERTIES:
:Attachments: 7to10-2.png
:ID:       3FF9D6E3-8CEE-4C7F-9193-0E2145C88747
:END:
[[/Users/ios/Dropbox/notes/slides/bif2014/data/3F/F9D6E3-8CEE-4C7F-9193-0E2145C88747/7to10-2.png]]
** Вовсю использует самое мощное средство композиции алгоритмов - функции
- Функции, принимающие функции, возвращаюшие функции. Это действительно очень мощный концепт, которому не мешают ни компилятор / рантайм, ни синтаксис
#+BEGIN_SRC clojure
  (apply (juxt min max
               (fn [& args]
                 (/ (reduce + args) (count args))))
         (for [_ (range 10)] (rand-int 50)))

  ; => [1 48 97/5]
#+END_SRC
** 
- Много функций работающих с небольшим количеством типов данных VS сотни типов данных с несколькими функциями для каждого (OOP)

** Многопоточность
- Многопоточность необходима при обработке значительно числа данных
- Clojure имеет целостную, невероятно удобную и эффективную модель конкуретного доступа к данным
- STM (Software Transaction Memory), CSP (Communicating Sequential Processes, каналы и го-блоки из Go, только реализованные библиотекой), атомарные регистры для объектов (atoms), promises, futures и еще пара примитивов
- Благодаря иммутабельности и функциональному подходу все это работает вместе и не отвлекает программиста, позволяя ему эффективно решать задачи

** Расширяемость
- Система макросов позволяет значительно расширять язык на уровне библиотек, оставляя сам язык очень компактным
#+BEGIN_SRC clojure
  (for [x (range 10) y (range 10)
        :when (and (odd? x) (even? y))
        :let [z (* x 2)]]
    [y z])

#+END_SRC
** 
#+BEGIN_SRC clojure
  (let*
    [iter__4635__auto__
     (fn*
       iter__33614

  ;; пропущено > 100 строк
             (if fs__4632__auto__
               (concat
                 fs__4632__auto__
                 (iter__33614 (rest s__33615)))
               (recur (rest s__33615)))))))))))))]
    (iter__4635__auto__ (range 10)))
#+END_SRC

** Отличный hosted-рантайм (JVM)
- Огромное количество проверенных и работающих библиотек
- Достаточная производительность (выше большинства других распространенных языков)
- Высокая динамичность рантайма (это важно!)
* Demo
** Demo time!                                                  :B_fullframe:
:PROPERTIES:
:BEAMER_env: fullframe
:END:
#+BEGIN_LaTeX
\begin{center}
\Huge Demo time!
\end{center}
#+END_LaTeX
** ClojureScript Pipeline                                           :ATTACH:
:PROPERTIES:
:Attachments: ill.png
:ID:       3880FBC8-2835-40C3-B241-745BA8E9AF0B
:END:
[[/Users/ios/Dropbox/notes/slides/bif2014/data/38/80FBC8-2835-40C3-B241-745BA8E9AF0B/ill.png]]


** React
- Рендерит функции в собственное (очень быстрое) представление дом-дерева
- Эффективно накладывает дифы между своим домом и домом браузера
- Изменил правила игры в вебе
- Функциональные методики теперь применимы и к рендерингу HTML
- ClojureScript за счет иммутабельных структур данных работает часто эффективнее "ручного" JS
* Заключение
** Не про это
- Может показаться, что я рассказывал про интерактивное программирование
- Это так, но далеко не только, просто удобно демонстрировать
- Все это не про Emacs и даже не про Clojure
** Спасибо                                                     :B_fullframe:
:PROPERTIES:
:BEAMER_env: fullframe
:END:
- https://github.com/prepor/bif14
- Спасибо за внимание ;)
